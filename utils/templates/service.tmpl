package {{.PackageName}}

import (
    "fmt"
    "mime/multipart"

    "gorm.io/gorm"
    "base/core/types"
    "base/core/emitter"
    "base/core/storage"
    "base/core/logger"
    "base/app/models"
)

const (
    Create{{.StructName}}Event = "{{toLower .PluralName}}.create"
    Update{{.StructName}}Event = "{{toLower .PluralName}}.update"
    Delete{{.StructName}}Event = "{{toLower .PluralName}}.delete"
)

type {{.StructName}}Service struct {
    DB      *gorm.DB
    Emitter *emitter.Emitter
    Storage *storage.ActiveStorage
    Logger  logger.Logger
}

func New{{.StructName}}Service(db *gorm.DB, emitter *emitter.Emitter, storage *storage.ActiveStorage, logger logger.Logger) *{{.StructName}}Service {
    return &{{.StructName}}Service{
        DB:      db,
        Emitter: emitter,
        Storage: storage,
        Logger:  logger,
    }
}

func (s *{{.StructName}}Service) Create(req *models.Create{{.StructName}}Request) (*models.{{.StructName}}, error) {
    item := &models.{{.StructName}}{
        {{- range .Fields}}
        {{- if eq .Type "*storage.Attachment"}}
        // {{.Name}} attachment is handled via separate endpoint
        {{- else if ne .Relationship "has_many"}}
        {{- if ne .Relationship "belongs_to"}}
        {{.Name}}: req.{{.Name}},
        {{- end}}
        {{- end}}
        {{- end}}
    }

    if err := s.DB.Create(item).Error; err != nil {
        s.Logger.Error("failed to create {{toLower .StructName}}", logger.String("error", err.Error()))
        return nil, fmt.Errorf("failed to create {{toLower .StructName}}: %w", err)
    }

    // Emit create event
    s.Emitter.Emit(Create{{.StructName}}Event, item)

    return s.GetById(item.Id)
}

func (s *{{.StructName}}Service) Update(id uint, req *models.Update{{.StructName}}Request) (*models.{{.StructName}}, error) {
    item := &models.{{.StructName}}{}
    if err := s.DB.First(item, id).Error; err != nil {
        s.Logger.Error("failed to find {{toLower .StructName}} for update", 
            logger.String("error", err.Error()),
            logger.Int("id", int(id)))
        return nil, fmt.Errorf("failed to find {{toLower .StructName}}: %w", err)
    }

    // Build updates map
    updates := make(map[string]interface{})
    {{- range .Fields}}
    {{- if eq .Type "*storage.Attachment"}}
    // {{.Name}} attachment is handled via separate endpoint
    {{- else if ne .Relationship "has_many"}}
    {{- if ne .Relationship "belongs_to"}}
    {{- if eq .Type "bool"}}
    // For boolean fields, check if it's included in the request (pointer would be non-nil)
    if req.{{.Name}} != nil {
        updates["{{.DBName}}"] = *req.{{.Name}}
    }
    {{- else if eq .Type "int"}}
    // For integer fields
    if req.{{.Name}} != 0 {
        updates["{{.DBName}}"] = req.{{.Name}}
    }
    {{- else if eq .Type "uint"}}
    // For unsigned integer fields
    if req.{{.Name}} != 0 {
        updates["{{.DBName}}"] = req.{{.Name}}
    }
    {{- else if eq .Type "float64"}}
    // For float fields
    if req.{{.Name}} != 0 {
        updates["{{.DBName}}"] = req.{{.Name}}
    }
    {{- else if eq .Type "types.DateTime"}}
    // For date/time fields, check if it's not zero
    if !req.{{.Name}}.IsZero() {
        updates["{{.DBName}}"] = req.{{.Name}}
    }
    {{- else}}
    // For string and other fields
    if req.{{.Name}} != "" {
        updates["{{.DBName}}"] = req.{{.Name}}
    }
    {{- end}}
    {{- end}}
    {{- end}}
    {{- end}}

    if err := s.DB.Model(item).Updates(updates).Error; err != nil {
        s.Logger.Error("failed to update {{toLower .StructName}}", 
            logger.String("error", err.Error()),
            logger.Int("id", int(id)))
        return nil, fmt.Errorf("failed to update {{toLower .StructName}}: %w", err)
    }

    result, err := s.GetById(item.Id)
    if err != nil {
        s.Logger.Error("failed to get updated {{toLower .StructName}}", 
            logger.String("error", err.Error()),
            logger.Int("id", int(id)))
        return nil, fmt.Errorf("failed to get updated {{toLower .StructName}}: %w", err)
    }

    // Emit update event
    s.Emitter.Emit(Update{{.StructName}}Event, result)

    return result, nil
}

func (s *{{.StructName}}Service) Delete(id uint) error {
    item := &models.{{.StructName}}{}
    if err := s.DB.First(item, id).Error; err != nil {
        s.Logger.Error("failed to find {{toLower .StructName}} for deletion", 
            logger.String("error", err.Error()),
            logger.Int("id", int(id)))
        return fmt.Errorf("failed to find {{toLower .StructName}}: %w", err)
    }

    // Delete file attachments if any
    {{- range .Fields}}
    {{- if eq .Type "*storage.Attachment"}}
    if item.{{.Name}} != nil {
        if err := s.Storage.Delete(item.{{.Name}}); err != nil {
            s.Logger.Error("failed to delete {{.JSONName}}", 
                logger.String("error", err.Error()),
                logger.Int("id", int(id)))
            return fmt.Errorf("failed to delete {{.JSONName}}: %w", err)
        }
    }
    {{- end}}
    {{- end}}

    if err := s.DB.Delete(item).Error; err != nil {
        s.Logger.Error("failed to delete {{toLower .StructName}}", 
            logger.String("error", err.Error()),
            logger.Int("id", int(id)))
        return fmt.Errorf("failed to delete {{toLower .StructName}}: %w", err)
    }

    // Emit delete event
    s.Emitter.Emit(Delete{{.StructName}}Event, item)

    return nil
}

func (s *{{.StructName}}Service) GetById(id uint) (*models.{{.StructName}}, error) {
    item := &models.{{.StructName}}{}
    
    query := item.Preload(s.DB)
    
    if err := query.First(item, id).Error; err != nil {
        s.Logger.Error("failed to get {{toLower .StructName}}", 
            logger.String("error", err.Error()),
            logger.Int("id", int(id)))
        return nil, fmt.Errorf("failed to get {{toLower .StructName}}: %w", err)
    }

    return item, nil
}

func (s *{{.StructName}}Service) GetAll(page *int, limit *int) (*types.PaginatedResponse, error) {
    var items []*models.{{.StructName}}
    var total int64
    query := s.DB.Model(&models.{{.StructName}}{})
    // Set default values if nil
	defaultPage := 1
	defaultLimit := 10
	if page == nil {
		page = &defaultPage
	}
	if limit == nil {
		limit = &defaultLimit
	}

    // Get total count
    if err := query.Count(&total).Error; err != nil {
        s.Logger.Error("failed to count {{toLower .PluralName}}", 
            logger.String("error", err.Error()))
        return nil, fmt.Errorf("failed to count {{toLower .PluralName}}: %w", err)
    }

    // Apply pagination if provided
    if page != nil && limit != nil {
        offset := (*page - 1) * *limit
        query = query.Offset(offset).Limit(*limit)
    }

    // Preload relationships
    query = (&models.{{.StructName}}{}).Preload(query)

    // Execute query
    if err := query.Find(&items).Error; err != nil {
        s.Logger.Error("failed to get {{toLower .PluralName}}", 
            logger.String("error", err.Error()))
        return nil, fmt.Errorf("failed to get {{toLower .PluralName}}: %w", err)
    }

    // Convert to response type
    responses := make([]*models.{{.StructName}}ListResponse, len(items))
    for i, item := range items {
        responses[i] = item.ToListResponse()
    }

    // Calculate total pages
    totalPages := int(math.Ceil(float64(total) / float64(*limit)))
    if totalPages == 0 {
        totalPages = 1
    }

    return &types.PaginatedResponse{
        Data: responses,
        Pagination: types.Pagination{
            Total:      int(total),
            Page:       *page,
            PageSize:   *limit,
            TotalPages: totalPages,
        },
    }, nil
}

{{- range .Fields}}
{{- if eq .Type "*storage.Attachment"}}
// Upload{{.Name}} uploads a file for the {{$.StructName}}'s {{.Name}} field
func (s *{{$.StructName}}Service) Upload{{.Name}}(id uint, file *multipart.FileHeader) (*models.{{$.StructName}}, error) {
    item := &models.{{$.StructName}}{}
    if err := s.DB.First(item, id).Error; err != nil {
        s.Logger.Error("failed to find {{toLower $.StructName}}", 
            logger.String("error", err.Error()),
            logger.Int("id", int(id)))
        return nil, fmt.Errorf("failed to find {{toLower $.StructName}}: %w", err)
    }

    // Delete existing file if any
    if item.{{.Name}} != nil {
        if err := s.Storage.Delete(item.{{.Name}}); err != nil {
            s.Logger.Error("failed to delete existing {{.JSONName}}", 
                logger.String("error", err.Error()),
                logger.Int("id", int(id)))
            return nil, fmt.Errorf("failed to delete existing {{.JSONName}}: %w", err)
        }
    }

    // Attach new file
    attachment, err := s.Storage.Attach(item, "{{.JSONName}}", file)
    if err != nil {
        s.Logger.Error("failed to attach {{.JSONName}}", 
            logger.String("error", err.Error()),
            logger.Int("id", int(id)))
        return nil, fmt.Errorf("failed to attach {{.JSONName}}: %w", err)
    }

    // Update the model with the new attachment
    if err := s.DB.Model(item).Association("{{.Name}}").Replace(attachment); err != nil {
        s.Logger.Error("failed to associate {{.JSONName}}", 
            logger.String("error", err.Error()),
            logger.Int("id", int(id)))
        return nil, fmt.Errorf("failed to associate {{.JSONName}}: %w", err)
    }

    return s.GetById(id)
}

// Remove{{.Name}} removes the file from the {{$.StructName}}'s {{.Name}} field
func (s *{{$.StructName}}Service) Remove{{.Name}}(id uint) (*models.{{$.StructName}}, error) {
    item := &models.{{$.StructName}}{}
    if err := s.DB.First(item, id).Error; err != nil {
        s.Logger.Error("failed to find {{toLower $.StructName}}", 
            logger.String("error", err.Error()),
            logger.Int("id", int(id)))
        return nil, fmt.Errorf("failed to find {{toLower $.StructName}}: %w", err)
    }

    if item.{{.Name}} == nil {
        return item, nil
    }

    if err := s.Storage.Delete(item.{{.Name}}); err != nil {
        s.Logger.Error("failed to delete {{.JSONName}}", 
            logger.String("error", err.Error()),
            logger.Int("id", int(id)))
        return nil, fmt.Errorf("failed to delete {{.JSONName}}: %w", err)
    }

    // Clear the association
    if err := s.DB.Model(item).Association("{{.Name}}").Clear(); err != nil {
        s.Logger.Error("failed to clear {{.JSONName}} association", 
            logger.String("error", err.Error()),
            logger.Int("id", int(id)))
        return nil, fmt.Errorf("failed to clear {{.JSONName}} association: %w", err)
    }

    return s.GetById(id)
}
{{- end}}
{{- end}}
