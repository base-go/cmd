package models

import (
    "fmt"
    "time"
    "gorm.io/gorm"
    {{- if .HasImageField }}
    "base/core/storage"
    {{- end }}
)

// {{.Model}} represents a {{.ModelLower}} entity
type {{.Model}} struct {
    Id        uint           `json:"id" gorm:"primarykey"`
    CreatedAt time.Time      `json:"created_at"`
    UpdatedAt time.Time      `json:"updated_at"`
    DeletedAt gorm.DeletedAt `json:"deleted_at,omitempty" gorm:"index"`
    {{- range .Fields}}
    {{- if not .IsRelation }}
    {{.Name}} {{.Type}} `json:"{{.JSONName}}"{{if .GORM}} gorm:"{{.GORM}}"{{end}}`
    {{- else if eq .Relationship "belongs_to" }}
    {{.Name}} {{.Type}} `json:"{{.JSONName}},omitempty"{{if .GORM}} gorm:"{{.GORM}}"{{end}}`
    {{- else if or (eq .Relationship "has_many") (eq .Relationship "has_one") }}
    {{.Name}} {{.Type}} `json:"{{.JSONName}},omitempty"{{if .GORM}} gorm:"{{.GORM}}"{{end}}`
    {{- end}}
    {{- end}}
}

// TableName returns the table name for the {{.Model}} model
func (m *{{.Model}}) TableName() string {
    return "{{.TableName}}"
}

// GetId returns the Id of the model
func (m *{{.Model}}) GetId() uint {
    return m.Id
}

// GetModelName returns the model name
func (m *{{.Model}}) GetModelName() string {
    return "{{.ModelSnake}}"
}

// {{.Model}}Response represents the API response for {{.Model}}
type {{.Model}}Response struct {
    Id        uint           `json:"id"`
    CreatedAt time.Time      `json:"created_at"`
    UpdatedAt time.Time      `json:"updated_at"`
    DeletedAt gorm.DeletedAt `json:"deleted_at,omitempty"`
    {{- range .Fields}}
    {{- if not .IsRelation }}
    {{.Name}} {{.Type}} `json:"{{.JSONName}}"`
    {{- else if eq .Relationship "belongs_to" }}
    {{.Name}} {{.Type}} `json:"{{.JSONName}},omitempty"`
    {{- else if or (eq .Relationship "has_many") (eq .Relationship "has_one") }}
    {{.Name}} {{.Type}} `json:"{{.JSONName}},omitempty"`
    {{- end}}
    {{- end}}
}

// {{.Model}}SelectOption represents a simplified response for select boxes and dropdowns
type {{.Model}}SelectOption struct {
    Id   uint   `json:"id"`
    {{- $nameField := "" }}
    {{- $titleField := "" }}
    {{- $nameFieldType := "" }}
    {{- $titleFieldType := "" }}
    {{- range .Fields }}
    {{- if not .IsRelation }}
    {{- if or (eq (toLower .Name) "name") (eq (toLower .Name) "title") }}
    {{- if eq (toLower .Name) "name" }}{{ $nameField = .Name }}{{ $nameFieldType = .Type }}{{end}}
    {{- if eq (toLower .Name) "title" }}{{ $titleField = .Name }}{{ $titleFieldType = .Type }}{{end}}
    {{- end }}
    {{- end }}
    {{- end }}
    {{- if $nameField }}
    Name string `json:"name"` // From {{$nameField}} field ({{$nameFieldType}})
    {{- else if $titleField }}
    Name string `json:"name"` // From {{$titleField}} field ({{$titleFieldType}})
    {{- else }}
    Name string `json:"name"` // Fallback to first string field or custom logic needed
    {{- end }}
}

// Create{{.Model}}Request represents the request payload for creating a {{.Model}}
type Create{{.Model}}Request struct {
    {{- range .Fields}}
    {{- if not .IsRelation }}
    {{- if .IsRequired }}
    {{.Name}} {{.Type}} `json:"{{.JSONName}}" binding:"required"`
    {{- else }}
    {{.Name}} {{.Type}} `json:"{{.JSONName}}"`
    {{- end }}
    {{- else if eq .Relationship "belongs_to" }}
    {{.Name}} {{.Type}} `json:"{{.JSONName}}" binding:"required"`
    {{- end}}
    {{- end}}
}

// Update{{.Model}}Request represents the request payload for updating a {{.Model}}
type Update{{.Model}}Request struct {
    {{- range .Fields}}
    {{- if not .IsRelation }}
    {{- if eq .Type "bool" }}
    {{.Name}} *{{.Type}} `json:"{{.JSONName}},omitempty"`
    {{- else }}
    {{.Name}} {{.Type}} `json:"{{.JSONName}},omitempty"`
    {{- end }}
    {{- else if eq .Relationship "belongs_to" }}
    {{- if eq .Type "bool" }}
    {{.Name}} *{{.Type}} `json:"{{.JSONName}},omitempty"`
    {{- else }}
    {{.Name}} {{.Type}} `json:"{{.JSONName}},omitempty"`
    {{- end }}
    {{- end}}
    {{- end}}
}

// ToResponse converts the model to an API response
func (m *{{.Model}}) ToResponse() *{{.Model}}Response {
    if m == nil {
        return nil
    }
    return &{{.Model}}Response{
        Id:        m.Id,
        CreatedAt: m.CreatedAt,
        UpdatedAt: m.UpdatedAt,
        DeletedAt: m.DeletedAt,
        {{- range .Fields}}
        {{.Name}}: m.{{.Name}},
        {{- end}}
    }
}

// ToSelectOption converts the model to a select option for dropdowns
func (m *{{.Model}}) ToSelectOption() *{{.Model}}SelectOption {
    if m == nil {
        return nil
    }
    {{- $nameField := "" }}
    {{- $titleField := "" }}
    {{- $nameFieldType := "" }}
    {{- $titleFieldType := "" }}
    {{- $firstStringField := "" }}
    {{- range .Fields }}
    {{- if not .IsRelation }}
    {{- if or (eq .Type "string") (eq .Type "translation.Field") }}
    {{- if eq $firstStringField "" }}{{ $firstStringField = .Name }}{{end}}
    {{- if eq (toLower .Name) "name" }}{{ $nameField = .Name }}{{ $nameFieldType = .Type }}{{end}}
    {{- if eq (toLower .Name) "title" }}{{ $titleField = .Name }}{{ $titleFieldType = .Type }}{{end}}
    {{- end }}
    {{- end }}
    {{- end }}
    
    var displayName string
    {{- if $nameField }}
    {{- if eq $nameFieldType "translation.Field" }}
    displayName = m.{{$nameField}}.String() // Extract value from translation field
    {{- else }}
    displayName = m.{{$nameField}}
    {{- end }}
    {{- else if $titleField }}
    {{- if eq $titleFieldType "translation.Field" }}
    displayName = m.{{$titleField}}.String() // Extract value from translation field
    {{- else }}
    displayName = m.{{$titleField}}
    {{- end }}
    {{- else if $firstStringField }}
    displayName = m.{{$firstStringField}} // Using first string field as display name
    {{- else }}
    displayName = fmt.Sprintf("{{.Model}} #%d", m.Id) // Fallback to ID-based display
    {{- end }}
    
    return &{{.Model}}SelectOption{
        Id:   m.Id,
        Name: displayName,
    }
}

// Preload preloads all the model's relationships
func (m *{{.Model}}) Preload(db *gorm.DB) *gorm.DB {
    query := db
    {{- range .Fields}}
    {{- if .IsRelation }}
    query = query.Preload("{{.Name}}")
    {{- end}}
    {{- end}}
    return query
}