package models

import (
    "time"
    "gorm.io/gorm"
    {{- if hasField .Fields "attachment" }}
    "base/core/storage"
    {{- end }}
    {{- range .Fields}}
    {{- if or (eq .Relationship "belongs_to") (eq .Relationship "belongsTo")}}
    {{- if eq .AssociatedType "users.User"}}
    "base/core/app/users"
    {{- end}}
    {{- end}}
    {{- end}}
)

// {{.StructName}} represents a {{toLower .StructName}} entity
type {{.StructName}} struct {
    Id        uint           `json:"id" gorm:"primarykey"`
    CreatedAt time.Time      `json:"created_at"`
    UpdatedAt time.Time      `json:"updated_at"`
    DeletedAt gorm.DeletedAt `json:"deleted_at,omitempty" gorm:"index"`
    {{- range .Fields}}
    {{- if eq .Type "*storage.Attachment"}}
    {{.Name}} {{.Type}} `json:"{{.JSONName}},omitempty" gorm:"{{.GORM}}"`
    {{- else if eq .Relationship "belongs_to"}}
    {{.Name}} {{.Type}} `json:"{{.JSONName}},omitempty" gorm:"{{.GORM}}"`
    {{- else if eq .Relationship "has_many"}}
    {{.Name}} {{.Type}} `json:"{{.JSONName}},omitempty" gorm:"{{.GORM}}"`
    {{- else}}
    {{.Name}} {{.Type}} `json:"{{.JSONName}}"`
    {{- end}}
    {{- end}}
}

// TableName returns the table name for the {{.StructName}} model
func (item *{{.StructName}}) TableName() string {
    return "{{ToSnakeCase .PluralName}}"
}

// GetId returns the Id of the model
func (item *{{.StructName}}) GetId() uint {
    return item.Id
}

// GetModelName returns the model name
func (item *{{.StructName}}) GetModelName() string {
    return "{{ToSnakeCase .StructName}}"
}

// {{.StructName}}ListResponse represents the list view response
type {{.StructName}}ListResponse struct {
    Id        uint      `json:"id"`
    CreatedAt time.Time `json:"created_at"`
    UpdatedAt time.Time `json:"updated_at"`
    {{- range .Fields}}
    {{- if eq .Type "*storage.Attachment"}}
    {{.Name}} {{.Type}} `json:"{{.JSONName}},omitempty"`
    {{- else if ne .Relationship "has_many"}}
    {{- if ne .Relationship "belongs_to"}}
    {{.Name}} {{.Type}} `json:"{{.JSONName}}"`
    {{- else}}
    {{.Name}} {{.Type}} `json:"{{.JSONName}}"`
    {{- end}}
    {{- end}}
    {{- end}}
}

// {{.StructName}}Response represents the detailed view response
type {{.StructName}}Response struct {
    Id        uint           `json:"id"`
    CreatedAt time.Time      `json:"created_at"`
    UpdatedAt time.Time      `json:"updated_at"`
    DeletedAt gorm.DeletedAt `json:"deleted_at,omitempty"`
    {{- range .Fields}}
    {{- if eq .Type "*storage.Attachment"}}
    {{.Name}} {{.Type}} `json:"{{.JSONName}},omitempty"`
    {{- else if eq .Relationship "belongs_to"}}
    {{.Name}} {{.Type}} `json:"{{.JSONName}},omitempty"`
    {{- else if eq .Relationship "has_many"}}
    {{.Name}} {{.Type}} `json:"{{.JSONName}},omitempty"`
    {{- else}}
    {{.Name}} {{.Type}} `json:"{{.JSONName}}"`
    {{- end}}
    {{- end}}
}

// Create{{.StructName}}Request represents the request payload for creating a {{.StructName}}
type Create{{.StructName}}Request struct {
    {{- range .Fields}}
    {{- if eq .Type "*storage.Attachment"}}
    {{.Name}} {{.Type}} `json:"{{.JSONName}},omitempty"`
    {{- else if ne .Relationship "has_many"}}
    {{- if ne .Relationship "belongs_to"}}
    {{.Name}} {{.Type}} `json:"{{.JSONName}}" binding:"required"`
    {{- else}}
    {{.Name}} {{.Type}} `json:"{{.JSONName}}" binding:"required"`
    {{- end}}
    {{- end}}
    {{- end}}
}

// Update{{.StructName}}Request represents the request payload for updating a {{.StructName}}
type Update{{.StructName}}Request struct {
    {{- range .Fields}}
    {{- if eq .Type "*storage.Attachment"}}
    {{.Name}} {{.Type}} `json:"{{.JSONName}},omitempty"`
    {{- else if ne .Relationship "has_many"}}
    {{- if ne .Relationship "belongs_to"}}
    {{- if eq .Type "bool"}}
    {{.Name}} *{{.Type}}  `json:"{{.JSONName}},omitempty"`
    {{- else}}
    {{.Name}} {{.Type}}  `json:"{{.JSONName}},omitempty"`
    {{- end}}
    {{- else}}
    {{- if eq .Type "bool"}}
    {{.Name}} *{{.Type}}  `json:"{{.JSONName}},omitempty"`
    {{- else}}
    {{.Name}} {{.Type}}  `json:"{{.JSONName}},omitempty"`
    {{- end}}
    {{- end}}
    {{- end}}
    {{- end}}
}

// ToListResponse converts the model to a list response
func (item *{{.StructName}}) ToListResponse() *{{.StructName}}ListResponse {
    if item == nil {
        return nil
    }
    return &{{.StructName}}ListResponse{
        Id:        item.Id,
        CreatedAt: item.CreatedAt,
        UpdatedAt: item.UpdatedAt,
        {{- range .Fields}}
        {{- if eq .Type "*storage.Attachment"}}
        {{.Name}}: item.{{.Name}},
        {{- else if ne .Relationship "has_many"}}
        {{- if ne .Relationship "belongs_to"}}
        {{.Name}}: item.{{.Name}},
        {{- else}}
        {{.Name}}: item.{{.Name}},
        {{- end}}
        {{- end}}
        {{- end}}
    }
}

// ToResponse converts the model to a detailed response
func (item *{{.StructName}}) ToResponse() *{{.StructName}}Response {
    if item == nil {
        return nil
    }
    return &{{.StructName}}Response{
        Id:        item.Id,
        CreatedAt: item.CreatedAt,
        UpdatedAt: item.UpdatedAt,
        DeletedAt: item.DeletedAt,
        {{- range .Fields}}
        {{- if eq .Type "*storage.Attachment"}}
        {{.Name}}: item.{{.Name}},
        {{- else if eq .Relationship "belongs_to"}}
        {{.Name}}: item.{{.Name}},
        {{- else if eq .Relationship "has_many"}}
        {{.Name}}: item.{{.Name}},
        {{- else}}
        {{.Name}}: item.{{.Name}},
        {{- end}}
        {{- end}}
    }
}

// Preload preloads all the model's relationships
func (item *{{.StructName}}) Preload(db *gorm.DB) *gorm.DB {
    query := db
    {{- range .Fields}}
    {{- if or (eq .Relationship "belongs_to") (eq .Relationship "has_many")}}
    query = query.Preload("{{.Name}}")
    {{- end}}
    {{- end}}
    return query
}