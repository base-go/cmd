package {{.PackageName}}_test

import (
	"testing"
	"time"

	"base/app/models"
	"base/test"

	"github.com/stretchr/testify/assert"
)

func Test{{.Model}}Models(t *testing.T) {
	helper := test.SetupTest(t)
	defer helper.TeardownTest()

	// Auto-migrate {{.Model}} table for testing
	err := helper.DB.AutoMigrate(&models.{{.Model}}{})
	assert.NoError(t, err)

	t.Run("{{.Model}} model operations comprehensive coverage", func(t *testing.T) {
		t.Run("create and basic operations", func(t *testing.T) {
			// Test {{.Model}} creation
			{{.ModelLower}} := &models.{{.Model}}{
				{{range .Fields}}{{if ne .Relationship ""}}{{else}}{{.Name}}: {{.TestValue}},
				{{end}}{{end}}
			}
			err := helper.DB.Create({{.ModelLower}}).Error
			assert.NoError(t, err)
			assert.NotZero(t, {{.ModelLower}}.Id)
			assert.NotZero(t, {{.ModelLower}}.CreatedAt)
			assert.NotZero(t, {{.ModelLower}}.UpdatedAt)

			// Test find by ID
			var found{{.Model}} models.{{.Model}}
			err = helper.DB.First(&found{{.Model}}, {{.ModelLower}}.Id).Error
			assert.NoError(t, err)
			assert.Equal(t, {{.ModelLower}}.Id, found{{.Model}}.Id)
			{{range .Fields}}{{if ne .Relationship ""}}{{else}}assert.Equal(t, {{.TestValue}}, found{{$.Model}}.{{.Name}})
			{{end}}{{end}}
		})

		t.Run("{{.Model}} model methods", func(t *testing.T) {
			{{.ModelLower}} := &models.{{.Model}}{
				{{range .Fields}}{{if ne .Relationship ""}}{{else}}{{.Name}}: {{.TestValue}},
				{{end}}{{end}}
			}
			err := helper.DB.Create({{.ModelLower}}).Error
			assert.NoError(t, err)

			// Test TableName
			assert.Equal(t, "{{.TableName}}", {{.ModelLower}}.TableName())

			// Test GetId
			assert.Equal(t, {{.ModelLower}}.Id, {{.ModelLower}}.GetId())

			// Test GetModelName
			assert.Equal(t, "{{.ModelLower}}", {{.ModelLower}}.GetModelName())

			// Test ToListResponse
			listResponse := {{.ModelLower}}.ToListResponse()
			assert.NotNil(t, listResponse)
			assert.Equal(t, {{.ModelLower}}.Id, listResponse.Id)
			{{range .Fields}}{{if ne .Relationship ""}}{{else}}assert.Equal(t, {{.TestValue}}, listResponse.{{.Name}})
			{{end}}{{end}}

			// Test ToResponse
			response := {{.ModelLower}}.ToResponse()
			assert.NotNil(t, response)
			assert.Equal(t, {{.ModelLower}}.Id, response.Id)
			{{range .Fields}}{{if ne .Relationship ""}}{{else}}assert.Equal(t, {{.TestValue}}, response.{{.Name}})
			{{end}}{{end}}

			// Test Preload
			query := {{.ModelLower}}.Preload(helper.DB)
			assert.NotNil(t, query)
		})

		t.Run("{{.Model}} soft delete", func(t *testing.T) {
			{{.ModelLower}} := &models.{{.Model}}{
				{{range .Fields}}{{if ne .Relationship ""}}{{else}}{{.Name}}: {{.TestValue}},
				{{end}}{{end}}
			}
			err := helper.DB.Create({{.ModelLower}}).Error
			assert.NoError(t, err)

			// Test timestamps
			assert.True(t, {{.ModelLower}}.CreatedAt.Before(time.Now().Add(time.Second)))
			assert.True(t, {{.ModelLower}}.UpdatedAt.Before(time.Now().Add(time.Second)))

			// Test soft delete
			err = helper.DB.Delete({{.ModelLower}}).Error
			assert.NoError(t, err)

			// Should not find deleted record
			var found{{.Model}} models.{{.Model}}
			err = helper.DB.First(&found{{.Model}}, {{.ModelLower}}.Id).Error
			assert.Error(t, err)

			// Should find with Unscoped
			err = helper.DB.Unscoped().First(&found{{.Model}}, {{.ModelLower}}.Id).Error
			assert.NoError(t, err)
			assert.Equal(t, {{.ModelLower}}.Id, found{{.Model}}.Id)
			assert.NotZero(t, found{{.Model}}.DeletedAt)
		})

		t.Run("validation of required fields", func(t *testing.T) {
			{{.ModelLower}} := &models.{{.Model}}{}
			err := helper.DB.Create({{.ModelLower}}).Error
			{{range .Fields}}{{if and (not (eq .Type "*storage.Attachment")) (not .IsRelation) .IsRequired}}
			// Missing required field {{.Name}} should cause error
			assert.Error(t, err)
			{{end}}{{end}}
		})
	})
}
