package {{.PackageName}}_test

import (
	"bytes"
	"encoding/json"
	"fmt"
	"net/http"
	"net/http/httptest"
	"testing"

	"base/app/{{.PackageName}}"
	"base/app/models"
	"base/core/emitter"
	"base/test"

	"github.com/gin-gonic/gin"
	"github.com/stretchr/testify/assert"
)

func Test{{.StructName}}Controllers(t *testing.T) {
	helper := test.SetupTest(t)
	defer helper.TeardownTest()

	// Auto-migrate {{.StructName}} table for testing
	err := helper.DB.AutoMigrate(&models.{{.StructName}}{})
	assert.NoError(t, err)

	// Create service and controller
	service := {{.PackageName}}.New{{.StructName}}Service(
		helper.DB,
		emitter.New(),
		nil, // storage can be nil for basic tests
		helper.Logger,
	)
	controller := {{.PackageName}}.New{{.StructName}}Controller(service, nil)

	// Setup router
 
	router := router.New()
	api := router.Group("/api")
	controller.Routes(api)

	t.Run("{{.StructName}} controller operations comprehensive coverage", func(t *testing.T) {
		t.Run("Create {{.StructName}}", func(t *testing.T) {
			createReq := models.Create{{.StructName}}Request{
				{{range .Fields}}{{if ne .Relationship ""}}{{else}}{{.Name}}: {{.TestValue}},
				{{end}}{{end}}
			}

			jsonData, _ := json.Marshal(createReq)
			req, _ := http.NewRequest("POST", "/api/{{ToKebabCase .PackageName}}", bytes.NewBuffer(jsonData))
			req.Header.Set("Content-Type", "application/json")

			w := httptest.NewRecorder()
			router.ServeHTTP(w, req)

			assert.Equal(t, http.StatusCreated, w.Code)

			var response models.{{.StructName}}Response
			err := json.Unmarshal(w.Body.Bytes(), &response)
			assert.NoError(t, err)
			assert.NotZero(t, response.Id)
			{{range .Fields}}{{if ne .Relationship ""}}{{else}}assert.Equal(t, {{.TestValue}}, response.{{.Name}})
			{{end}}{{end}}
		})

		t.Run("Get {{.StructName}} by ID", func(t *testing.T) {
			// Create test {{.LowerName}}
			{{.LowerName}} := &models.{{.StructName}}{
				{{range .Fields}}{{if ne .Relationship ""}}{{else}}{{.Name}}: {{.TestValue}},
				{{end}}{{end}}
			}
			err := helper.DB.Create({{.LowerName}}).Error
			assert.NoError(t, err)

			req, _ := http.NewRequest("GET", fmt.Sprintf("/api/{{ToKebabCase .PackageName}}/%d", {{.LowerName}}.Id), nil)
			w := httptest.NewRecorder()
			router.ServeHTTP(w, req)

			assert.Equal(t, http.StatusOK, w.Code)

			var response models.{{.StructName}}Response
			err = json.Unmarshal(w.Body.Bytes(), &response)
			assert.NoError(t, err)
			assert.Equal(t, {{.LowerName}}.Id, response.Id)
			{{range .Fields}}{{if ne .Relationship ""}}{{else}}assert.Equal(t, {{.TestValue}}, response.{{.Name}})
			{{end}}{{end}}
		})

		t.Run("Update {{.StructName}}", func(t *testing.T) {
			// Create test {{.LowerName}}
			{{.LowerName}} := &models.{{.StructName}}{
				{{range .Fields}}{{if ne .Relationship ""}}{{else}}{{.Name}}: {{.TestValue}},
				{{end}}{{end}}
			}
			err := helper.DB.Create({{.LowerName}}).Error
			assert.NoError(t, err)

			updateReq := models.Update{{.StructName}}Request{
				{{range .Fields}}{{if ne .Relationship ""}}{{else}}{{.Name}}: {{.UpdateTestValue}},
				{{end}}{{end}}
			}

			jsonData, _ := json.Marshal(updateReq)
			req, _ := http.NewRequest("PUT", fmt.Sprintf("/api/{{ToKebabCase .PackageName}}/%d", {{.LowerName}}.Id), bytes.NewBuffer(jsonData))
			req.Header.Set("Content-Type", "application/json")

			w := httptest.NewRecorder()
			router.ServeHTTP(w, req)

			assert.Equal(t, http.StatusOK, w.Code)

			var response models.{{.StructName}}Response
			err = json.Unmarshal(w.Body.Bytes(), &response)
			assert.NoError(t, err)
			assert.Equal(t, {{.LowerName}}.Id, response.Id)
			{{range .Fields}}{{if ne .Relationship ""}}{{else}}assert.Equal(t, {{.UpdateTestValue}}, response.{{.Name}})
			{{end}}{{end}}
		})

		t.Run("Delete {{.StructName}}", func(t *testing.T) {
			// Create test {{.LowerName}}
			{{.LowerName}} := &models.{{.StructName}}{
				{{range .Fields}}{{if ne .Relationship ""}}{{else}}{{.Name}}: {{.TestValue}},
				{{end}}{{end}}
			}
			err := helper.DB.Create({{.LowerName}}).Error
			assert.NoError(t, err)

			req, _ := http.NewRequest("DELETE", fmt.Sprintf("/api/{{ToKebabCase .PackageName}}/%d", {{.LowerName}}.Id), nil)
			w := httptest.NewRecorder()
			router.ServeHTTP(w, req)

			assert.Equal(t, http.StatusNoContent, w.Code)

			// Verify deletion
			var found models.{{.StructName}}
			err = helper.DB.First(&found, {{.LowerName}}.Id).Error
			assert.Error(t, err) // Should not find deleted record
		})

		t.Run("List {{.PluralName}} (paginated)", func(t *testing.T) {
			// Create multiple test {{.PluralLowerName}}
			for i := 0; i < 5; i++ {
				{{.LowerName}} := &models.{{.StructName}}{
					{{range .Fields}}{{.Name}}: {{.TestValueWithIndex}},
					{{end}}
				}
				err := helper.DB.Create({{.LowerName}}).Error
				assert.NoError(t, err)
			}

			req, _ := http.NewRequest("GET", "/api/{{ToKebabCase .PackageName}}?page=1&limit=3", nil)
			w := httptest.NewRecorder()
			router.ServeHTTP(w, req)

			assert.Equal(t, http.StatusOK, w.Code)

			var response struct {
				Data       []models.{{.StructName}}ListResponse `json:"data"`
				Pagination struct {
					Page     int `json:"page"`
					PageSize int `json:"page_size"`
					Total    int `json:"total"`
				} `json:"pagination"`
			}
			err := json.Unmarshal(w.Body.Bytes(), &response)
			assert.NoError(t, err)
			assert.NotEmpty(t, response.Data)
			assert.LessOrEqual(t, len(response.Data), 3)
			assert.Equal(t, 1, response.Pagination.Page)
			assert.Equal(t, 3, response.Pagination.PageSize)
		})

		t.Run("List All {{.PluralName}} (unpaginated)", func(t *testing.T) {
			req, _ := http.NewRequest("GET", "/api/{{ToKebabCase .PackageName}}/all", nil)
			w := httptest.NewRecorder()
			router.ServeHTTP(w, req)

			assert.Equal(t, http.StatusOK, w.Code)

			var response []models.{{.StructName}}ListResponse
			err := json.Unmarshal(w.Body.Bytes(), &response)
			assert.NoError(t, err)
			assert.NotNil(t, response)
		})

		t.Run("Error cases", func(t *testing.T) {
			// Test Get with invalid ID
			req, _ := http.NewRequest("GET", "/api/{{ToKebabCase .PackageName}}/99999", nil)
			w := httptest.NewRecorder()
			router.ServeHTTP(w, req)
			assert.Equal(t, http.StatusNotFound, w.Code)

			// Test Update with invalid ID
			updateReq := models.Update{{.StructName}}Request{
				{{range .Fields}}{{if ne .Relationship ""}}{{else}}{{.Name}}: {{.UpdateTestValue}},
				{{end}}{{end}}
			}
			jsonData, _ := json.Marshal(updateReq)
			req, _ = http.NewRequest("PUT", "/api/{{ToKebabCase .PackageName}}/99999", bytes.NewBuffer(jsonData))
			req.Header.Set("Content-Type", "application/json")
			w = httptest.NewRecorder()
			router.ServeHTTP(w, req)
			assert.Equal(t, http.StatusNotFound, w.Code)

			// Test Delete with invalid ID
			req, _ = http.NewRequest("DELETE", "/api/{{ToKebabCase .PackageName}}/99999", nil)
			w = httptest.NewRecorder()
			router.ServeHTTP(w, req)
			assert.Equal(t, http.StatusNotFound, w.Code)
		})
	})
}
