package {{.PackageName}}

import (
    "net/http"
    "strconv"

    "base/app/models"
    "base/core/router"
    "base/core/storage"
)

type {{.StructName}}Controller struct {
    Service    *{{.StructName}}Service
    Storage    *storage.ActiveStorage
}

func New{{.StructName}}Controller(service *{{.StructName}}Service, storage *storage.ActiveStorage) *{{.StructName}}Controller {
    return &{{.StructName}}Controller{
        Service: service,
        Storage: storage,
    }
}

func (c *{{.StructName}}Controller) Routes(router *router.RouterGroup) {
    // Main CRUD endpoints
    router.GET("/{{ToKebabCase .PackageName}}", c.List)       // Paginated list
    router.GET("/{{ToKebabCase .PackageName}}/all", c.ListAll) // Unpaginated list
    router.GET("/{{ToKebabCase .PackageName}}/:id", c.Get)
    router.POST("/{{ToKebabCase .PackageName}}", c.Create)
    router.PUT("/{{ToKebabCase .PackageName}}/:id", c.Update)
    router.DELETE("/{{ToKebabCase .PackageName}}/:id", c.Delete)
}

// Create{{.StructName}} godoc
// @Summary Create a new {{.StructName}}
// @Description Create a new {{.StructName}} with the input payload
// @Tags App/{{.StructName}}
// @Security BearerAuth
// @Accept json
// @Produce json
// @Param {{ToKebabCase $.PackageName}} body models.Create{{.StructName}}Request true "Create {{.StructName}} request"
// @Success 201 {object} models.{{.StructName}}Response
// @Failure 400 {object} ErrorResponse
// @Failure 500 {object} ErrorResponse
// @Router /api/{{ToKebabCase $.PackageName}} [post]
func (c *{{.StructName}}Controller) Create(ctx *router.Context) error {
    var req models.Create{{.StructName}}Request
    if err := ctx.ShouldBindJSON(&req); err != nil {
        return ctx.JSON(http.StatusBadRequest, ErrorResponse{Error: err.Error()})
    }

    item, err := c.Service.Create(&req)
    if err != nil {
        return ctx.JSON(http.StatusInternalServerError, ErrorResponse{Error: "Failed to create item: " + err.Error()})
    }

    return ctx.JSON(http.StatusCreated, item.ToResponse())
}

// Get{{.StructName}} godoc
// @Summary Get a {{.StructName}}
// @Description Get a {{.StructName}} by its id
// @Tags App/{{.StructName}}
// @Security BearerAuth
// @Accept json
// @Produce json
// @Param id path int true "{{.StructName}} id"
// @Success 200 {object} models.{{.StructName}}Response
// @Failure 400 {object} ErrorResponse
// @Failure 404 {object} ErrorResponse
// @Router /api/{{ToKebabCase $.PackageName}}/{id} [get]
func (c *{{.StructName}}Controller) Get(ctx *router.Context) error {
    id, err := strconv.ParseUint(ctx.Param("id"), 10, 32)
    if err != nil {
        return ctx.JSON(http.StatusBadRequest, ErrorResponse{Error: "Invalid id format"})
    }

    item, err := c.Service.GetById(uint(id))
    if err != nil {
        return ctx.JSON(http.StatusNotFound, ErrorResponse{Error: "Item not found"})
    }

    return ctx.JSON(http.StatusOK, item.ToResponse())
}

// List{{.PluralName}} godoc
// @Summary List {{ToKebabCase $.PackageName}}
// @Description Get a list of {{ToKebabCase $.PackageName}}
// @Tags App/{{.StructName}}
// @Security BearerAuth
// @Accept json
// @Produce json
// @Param page query int false "Page number"
// @Param limit query int false "Number of items per page"
// @Success 200 {object} types.PaginatedResponse
// @Failure 400 {object} ErrorResponse
// @Failure 500 {object} ErrorResponse
// @Router /api/{{ToKebabCase $.PackageName}} [get]
func (c *{{.StructName}}Controller) List(ctx *router.Context) error {
    var page, limit *int

    if pageStr := ctx.Query("page"); pageStr != "" {
        if pageNum, err := strconv.Atoi(pageStr); err == nil && pageNum > 0 {
            page = &pageNum
        } else {
            return ctx.JSON(http.StatusBadRequest, ErrorResponse{Error: "Invalid page number"})
        }
    }

    if limitStr := ctx.Query("limit"); limitStr != "" {
        if limitNum, err := strconv.Atoi(limitStr); err == nil && limitNum > 0 {
            limit = &limitNum
        } else {
            return ctx.JSON(http.StatusBadRequest, ErrorResponse{Error: "Invalid limit number"})
        }
    }

    paginatedResponse, err := c.Service.GetAll(page, limit, nil)
    if err != nil {
        return ctx.JSON(http.StatusInternalServerError, ErrorResponse{Error: "Failed to fetch items: " + err.Error()})
    }

    return ctx.JSON(http.StatusOK, paginatedResponse)
}

// ListAll{{.PluralName}} godoc
// @Summary List all {{ToKebabCase $.PackageName}} without pagination
// @Description Get a list of all {{ToKebabCase $.PackageName}} without pagination
// @Tags App/{{.StructName}}
// @Security BearerAuth
// @Accept json
// @Produce json
// @Success 200 {object} types.PaginatedResponse
// @Failure 500 {object} ErrorResponse
// @Router /api/{{ToKebabCase $.PackageName}}/all [get]
func (c *{{.StructName}}Controller) ListAll(ctx *router.Context) error {
    paginatedResponse, err := c.Service.GetAll(nil, nil, nil)
    if err != nil {
        return ctx.JSON(http.StatusInternalServerError, ErrorResponse{Error: "Failed to fetch all items: " + err.Error()})
    }

    return ctx.JSON(http.StatusOK, paginatedResponse)
}

// Update{{.StructName}} godoc
// @Summary Update a {{.StructName}}
// @Description Update a {{.StructName}} by its id
// @Tags App/{{.StructName}}
// @Security BearerAuth
// @Accept json
// @Produce json
// @Param id path int true "{{.StructName}} id"
// @Param {{ToKebabCase $.PackageName}} body models.Update{{.StructName}}Request true "Update {{.StructName}} request"
// @Success 200 {object} models.{{.StructName}}Response
// @Failure 400 {object} ErrorResponse
// @Failure 404 {object} ErrorResponse
// @Failure 500 {object} ErrorResponse
// @Router /api/{{ToKebabCase $.PackageName}}/{id} [put]
func (c *{{.StructName}}Controller) Update(ctx *router.Context) error {
    id, err := strconv.ParseUint(ctx.Param("id"), 10, 32)
    if err != nil {
        return ctx.JSON(http.StatusBadRequest, ErrorResponse{Error: "Invalid id format"})
    }

    var req models.Update{{.StructName}}Request
    if err := ctx.ShouldBindJSON(&req); err != nil {
        return ctx.JSON(http.StatusBadRequest, ErrorResponse{Error: err.Error()})
    }

    item, err := c.Service.Update(uint(id), &req)
    if err != nil {
        return ctx.JSON(http.StatusInternalServerError, ErrorResponse{Error: "Failed to update item: " + err.Error()})
    }

    return ctx.JSON(http.StatusOK, item.ToResponse())
}

// Delete{{.StructName}} godoc
// @Summary Delete a {{.StructName}}
// @Description Delete a {{.StructName}} by its id
// @Tags App/{{.StructName}}
// @Security BearerAuth
// @Accept json
// @Produce json
// @Param id path int true "{{.StructName}} id"
// @Success 200 {object} SuccessResponse
// @Failure 400 {object} ErrorResponse
// @Failure 500 {object} ErrorResponse
// @Router /api/{{ToKebabCase $.PackageName}}/{id} [delete]
func (c *{{.StructName}}Controller) Delete(ctx *router.Context) error {
    id, err := strconv.ParseUint(ctx.Param("id"), 10, 32)
    if err != nil {
        return ctx.JSON(http.StatusBadRequest, ErrorResponse{Error: "Invalid id format"})
    }

    if err := c.Service.Delete(uint(id)); err != nil {
        return ctx.JSON(http.StatusInternalServerError, ErrorResponse{Error: "Failed to delete item: " + err.Error()})
    }

    return ctx.JSON(http.StatusOK, SuccessResponse{Message: "Item deleted successfully"})
}

type ErrorResponse struct {
    Error string `json:"error"`
}

type SuccessResponse struct {
    Message string `json:"message"`
}